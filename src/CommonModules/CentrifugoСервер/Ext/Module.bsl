 
 // Внешние методы
 #Область ПрограммныйИнтерфейс
 
 // Функция - Получить канал по номеру
 //
 // Параметры:
 //  ВиртуальныйНомер - Строка - виртуальный номер оператора (11 цифр, начиная с 7)
 // Возвращаемое значение:
 //  строка - внутренний номер оператора (4 цифры) или "news"
 //
 Функция ПолучитьКаналПоНомеру( ВиртуальныйНомер = "" ) Экспорт 
	 ДлинаВнутреннегоНомера = 4;
	 Канал = "news"; 
	 
	 Если СтрДлина(ВиртуальныйНомер) = ДлинаВнутреннегоНомера Тогда
		 Канал = ВиртуальныйНомер;
	 Иначе     
		 Канал = Прав(ВиртуальныйНомер, ДлинаВнутреннегоНомера);	
	 КонецЕсли;
	 
	 Возврат Канал;
 КонецФункции	
 
 // Функция - Послать сообщение на канал
 //
 // {
 //    "method": "publish",
 //    "params": {
 //        "channel": "chat", 
 //        "data": {
 //            "text": "hello"
 //        }
 //    } 
 // }		
 //
 // Параметры:
 //  стрЗвонка - структура - структура истории звонка
 // 
 // Возвращаемое значение:
 // булево - флаг успешной отправки в Centrifugo
 //
 Функция ПослатьСообщениеНаКанал( стрЗвонка ) Экспорт 
	 Успешно = Истина;                                              
	 method  = "publish";
	 
	 channel = ?(стрЗвонка.Канал = "", ПолучитьКаналПоНомеру( стрЗвонка.Номер ), стрЗвонка.Канал); 
	 
	 data = Новый Структура("text, user", стрЗвонка.ЗвонящийНомер,  стрЗвонка.ВызываемыйНомер);
	 params = Новый Структура("channel, data", channel, data);
	 Данные = Новый Структура("method, params", method, params);
	 ТелоСтрокой = Данные_в_JSON(Данные);
	 
	 текстОшибки = ОтправитьЗапрос( ТелоСтрокой ); 
	 Успешно = (текстОшибки = "");
	 
	 Если НЕ Успешно Тогда
		 ЗаписьЖурналаРегистрации("Centrifugo", УровеньЖурналаРегистрации.Ошибка, , params, текстОшибки);
	 КонецЕсли;	
	 
	 Возврат Успешно;
 КонецФункции 
 
 #КонецОбласти
 
 // Внутренние методы
 #Область СлужебныеПроцедурыИФункции  
 
// Функция - Данные в JSON
//
// Параметры:
//  Данные - структура - структура полей для отправки 
// 
// Возвращаемое значение:
//  строка - текст JSON
//
 Функция Данные_в_JSON(Данные) 
	 ЗаписьJSON = Новый ЗаписьJSON;
	 ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	 ЗаписатьJSON(ЗаписьJSON, Данные);
	 Возврат ЗаписьJSON.Закрыть();
 КонецФункции
 
// Функция - Отправить HTTPзапрос
//
// Параметры:
//  ТекстJSON - строка - текст JSON для отправки
// 
// Возвращаемое значение:
//  строка - Текст Ошибки
//
 Функция ОтправитьЗапрос( ТекстJSON = "" )
	 КодСостоянияОк = 200;
	 ТекстОшибки = "";  
	 
	 Сервер = Константы.СерверCentrifugo.Получить();
	 apikey = Константы.apikeyCentrifugo.Получить();
	 	 
	 Ресурс = "/api";
	 Таймаут = 300;
	 ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
	 HTTP =  Новый HTTPСоединение(Сервер, , , , , Таймаут, ЗащищенноеСоединение);
	 
	 ЗаголовокHTTP = Новый Соответствие();
	 ЗаголовокHTTP.Вставить("Content-Type", "application/json");   
	 ЗаголовокHTTP.Вставить("Authorization", apikey);           // ОБЯЗАТЕЛЬНО!
	 ЗаголовокHTTP.Вставить("Content-Length", формат(стрДлина(ТекстJSON), "ЧДЦ=; ЧН=0; ЧГ=0") );
	 ЗаголовокHTTP.Вставить("Host", "localhost:8000");  // в локальной сети!
	 ЗаголовокHTTP.Вставить("User-Agent", "Enterprise1S/8.3.20");
	 
	 ЗаголовокHTTP.Вставить("Accept", "application/json");
	 ЗаголовокHTTP.Вставить("Accept-Encoding", "gzip, deflate");
	 
	 ЗапросHTTP = Новый HTTPЗапрос(Ресурс, ЗаголовокHTTP);
	 ЗапросHTTP.УстановитьТелоИзСтроки(ТекстJSON);
	 
	 Ответ = HTTP.ОтправитьДляОбработки(ЗапросHTTP); 
	 
	 Если Ответ.КодСостояния <> КодСостоянияОк Тогда
		 ТекстОшибки = "КодСостояния: " + строка(Ответ.КодСостояния) + "; " + Ответ.ПолучитьТелоКакСтроку();   
	 КонецЕсли;	
	 
	 Возврат ТекстОшибки;		
 КонецФункции
 
 #КонецОбласти